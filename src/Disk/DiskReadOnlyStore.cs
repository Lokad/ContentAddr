using System;
using System.Collections.Generic;
using System.IO;

namespace Lokad.ContentAddr.Disk
{
    /// <summary> Stores blobs in files inside a directory. </summary>
    public class DiskReadOnlyStore : IReadOnlyStore<IReadBlobRef>
    {
        /// <summary> The path of the directory. </summary>
        protected readonly string Path;

        public DiskReadOnlyStore(string path)
        {
            Path = path;
        }

        public long Realm => throw new NotSupportedException();

        /// <see cref="IReadOnlyStore{TBlobRef}.this"/>
        public IReadBlobRef this[Hash hash] => new DiskBlobRef(hash, DiskStorePaths.PathOfHash(Path, hash));

        /// <summary> Determine whether the blob exists. </summary>
        public bool BlobExists(Hash hash)
        {
            var blobPath = DiskStorePaths.PathOfHash(Path, hash);
            return File.Exists(blobPath);
        }

        /// <summary> Retrieve all blobs written to this store. </summary>
        /// <remarks>
        ///     This is not perfectly thread-safe: it might miss blob creations or 
        ///     deletions, and may fail when a file or directory being examines is
        ///     deleted at the same time.
        /// </remarks>
        public IEnumerable<WrittenBlob> GetAllBlobs()
        {
            foreach (var dir in Directory.EnumerateDirectories(Path))
            {
                // EnumerateDirectories() does not add a terminating '\\', so the last
                // three characters are the `_XX` first hex segment as generated by PathOfHash.
                // We ignore any directories that do not fit this naming.
                if (dir[dir.Length - 3] != '_') continue;
                var prefix = dir.Substring(dir.Length - 2);

                foreach (var file in Directory.EnumerateFiles(dir))
                {
                    // The 'file' path starts with 'dir' followed by '\\', so we can extract
                    // the filename directly in this way. Since two characters were kept in 
                    // 'prefix', the file name should be 32 - 2 = 30 hex characters long.
                    if (file.Length - dir.Length - 1 != 30) continue;

                    var suffix = file.Substring(dir.Length + 1);
                    var hash = new Hash(prefix + suffix);

                    var info = new FileInfo(file);
                    yield return new WrittenBlob(hash, info.Length);
                }
            }
        }

        public bool IsSameStore(IReadOnlyStore other)
        {
            if (other is DiskReadOnlyStore dros)
                return dros.Path == Path;

            return false;
        }
    }
}
